app ECommerce {
  wasp: {
    version: "^0.11.4"
  },
  title: "ECommerce",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int     @id @default(autoincrement())
    username String  @unique
    password String
    orders   Order[]
psl=}

entity Product {=psl
    id             Int              @id @default(autoincrement())
    title          String
    description    String
    price          Float
    inventory      Int
    ProductVariant ProductVariant[]
    Order          Order?           @relation(fields: [orderId], references: [id])
    orderId        Int?
psl=}

entity ProductVariant {=psl
    id        Int     @id @default(autoincrement())
    size      String
    color     String
    product   Product @relation(fields: [productId], references: [id])
    productId Int
psl=}

entity Order {=psl
    id       Int       @id @default(autoincrement())
    user     User      @relation(fields: [userId], references: [id])
    userId   Int
    products Product[]
    status   String
    total    Float
psl=}

action createProduct {
  fn: import { createProduct } from "@server/actions.js",
  entities: [Product]
}

action createProductVariant {
  fn: import { createProductVariant } from "@server/actions.js",
  entities: [ProductVariant]
}

action updateProduct {
  fn: import { updateProduct } from "@server/actions.js",
  entities: [Product]
}

action createOrder {
  fn: import { createOrder } from "@server/actions.js",
  entities: [Order, Product]
}

action updateOrderStatus {
  fn: import { updateOrderStatus } from "@server/actions.js",
  entities: [Order]
}

query getProduct {
  fn: import { getProduct } from "@server/queries.js",
  entities: [Product]
}

query getProducts {
  fn: import { getProducts } from "@server/queries.js",
  entities: [Product]
}

query getOrder {
  fn: import { getOrder } from "@server/queries.js",
  entities: [Order]
}

query getOrders {
  fn: import { getOrders } from "@server/queries.js",
  entities: [Order]
}

route ProductRoute { path: "/product/:productId", to: ProductPage }
page ProductPage {
  component: import { ProductPage } from "@client/pages/Product.jsx"
}

route ProductsRoute { path: "/products", to: ProductsPage }
page ProductsPage {
  component: import { Products } from "@client/pages/Products.jsx",
  authRequired: false
}

route CartRoute { path: "/cart", to: CartPage }
page CartPage {
  component: import { Cart } from "@client/pages/Cart.jsx",
  authRequired: false
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  component: import { Checkout } from "@client/pages/Checkout.jsx",
  authRequired: true
}

route OrdersRoute { path: "/orders", to: OrdersPage }
page OrdersPage {
  component: import { Orders } from "@client/pages/Orders.jsx",
  authRequired: true
}

route AdminRoute { path: "/admin", to: AdminPage }
page AdminPage {
  component: import { Admin } from "@client/pages/Admin.jsx",
  authRequired: true
}

route HomePageRoute { path: "/", to: HomePage }
page HomePage {
  component: import { HomePage } from "@client/pages/Home.jsx",
  authRequired: false
}